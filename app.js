// 3. LOOPS. FUNCTIONS
// üìÄüìÄ

// 1.
// –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é compact() —è–∫–∞ –º–∞—î –ø—Ä–∏–π–º–∞—Ç–∏ –Ω–∞ –≤—Ö—ñ–¥ –º–∞—Å–∏–≤, –∞ –Ω–∞ –≤–∏—Ö—ñ–¥ –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å.
// –ø—Ä–∏–∫–ª–∞–¥:
// 1 —Å–ø–æ—Å—ñ–± —á–µ—Ä–µ–∑ new  Set
// const arr = [5, 3, 4, 5, 6, 7, 3];
// const compact = function (array) {
//   return (array = [...new Set(array)]);
// };
// const arr2 = compact(arr);
// console.log(arr2); // [5,3,4,6,7]
// 2 —Å–ø–æ—Å—ñ–± —á–µ—Ä–µ–∑ filter
// const compact = function (array) {
//   const uniqueItems = array.filter(function (item, index) {
//     return array.indexOf(item) === index;
//   });
//   return uniqueItems;
// };

// const arr2 = compact(arr);
// console.log(arr2); // [5,3,4,6,7]
// console.log(arr);
// 2.
// –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é createArray(start, end), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –Ω–∞ –≤—Ö—ñ–¥ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
//  - –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
//  - –∫—ñ–Ω—Ü–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
// –∞ –Ω–∞ –≤–∏—Ö–æ–¥—ñ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —ñ–∑ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ü–∏—Ö –∑–Ω–∞—á–µ–Ω—å (—Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ª–∏—à–µ —ñ–∑ —á–∏—Å–ª–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏)
// let arr = createArray(2, 9);
// console.log(arr); // [2,3,4,5,6,7,8,9]
// const createArray = function (start, end) {
//   const arr = [];
//   for (let i = start; i <= end; i++) {
//     arr.push(i);
//   }
//   return arr;
// };
// let arr = createArray(2, 9);
// console.log(arr); // [2,3,4,5,6,7,8,9]

// 3.
// –ó–∞–¥–∞–Ω—ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ a —ñ b (a < b). –í–∏–≤–µ–¥—ñ—Ç—å —É—Å—ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –≤—ñ–¥ a –¥–æ b –≤–∫–ª—é—á–Ω–æ,
//–ø—Ä–∏ —Ü—å–æ–º—É a –≤–∏–≤–æ–¥–∏—Ç—Å—è 1 —Ä–∞–∑,
//  —á–∏—Å–ª–æ –∞+1 - –¥–≤–∞ —Ä–∞–∑–∏ —ñ —Ç.–¥.

// function createArray(a, b) {
//   const arr = [];
//   if (a <= 0 || b <= 0) {
//     return "a , b data must not be negative";
//   } else if (a === b) {
//     return "The data is entered incorrectly";
//   } else if (typeof a !== "number" || typeof b !== "number") {
//     return "Type data is entered incorrectly";
//   } else if (a < b) {
//     for (let i = a; i <= b; i++) {
//       for (let j = a; j <= i; j++) {
//         arr.push(i);
//       }
//     }
//   }
//   return arr;
// }
// console.log(createArray(1, 10));

// 4.
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é randArray(k), —è–∫–∞ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏–º–µ –º–∞—Å–∏–≤ k –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏.
// –í–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è —ñ–∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É 1-500.
randArray(5); // [399,310,232,379,40]
function randArray(capacity) {
  const arr = [];
  for (let i = 0; i < capacity; i++) {
    let randomNum = Math.floor(Math.random() * 500 + 1);
    arr.push(randomNum);
  }
  return arr;
}
console.log(randArray(5));
//—É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è —Ñ–Ω–∫—Ü—ñ—è —è–∫–∞ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏–º–µ –º–∞—Å–∏–≤ k –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏ —ñ–∑ –∑–∞–¥–∞–Ω–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
// function randArray(capacity, min, max) {
//   const arr = [];
//   for (let i = 0; i < capacity; i++) {
//     let randomNum = Math.round(Math.random() * max+ min);
//     arr.push(randomNum);
//   }
//   return arr;
// }
// console.log(randArray(10, 100, 500));
// 5.
// –Ñ –º–∞—Å–∏–≤ [5, ‚ÄúLimit‚Äù, 12, ‚Äúa‚Äù, ‚Äú3‚Äù, 99, 2, [2, 4, 3, ‚Äú33‚Äù, ‚Äúa‚Äù, ‚Äútext‚Äù], ‚Äústrong‚Äù, ‚Äúbroun‚Äù]
// –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –≤–∏–≤–µ–¥–µ –Ω–æ–≤—ñ –º–∞—Å–∏–≤–∏ —è–∫—ñ —Å–∫–ª–∞–¥–∞—é—Ç—å—Å—è —ñ–∑ –¥–∞–Ω–∏—Ö –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É, –∞–ª–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
//(–Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç–∏ —Ç–∏–ø —Å—Ç—Ä—ñ–Ω–≥ –≤ —á–∏—Å–ª–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–∞–º –ª–∏—à–µ —á–∏—Å–ª–æ)
let arr = [
  5,
  "Limit",
  12,
  "a",
  "3",
  99,
  2,
  [2, 4, 3, "33", "a", "text"],
  "strong",
  "broun",
];
arr = arr.flat();
console.log(arr);
// function funcName(arr) {
//   const resultNumber = [];
//   const resultString = [];
//   const config = [resultNumber, resultString];
//   for (let i = 0; i < arr.length; i++) {
//     if (typeof arr[i] === "number") {
//       resultNumber.push(arr[i]);
//     } else if (typeof arr[i] === "string") {
//       resultString.push(arr[i]);
//     }
//   }
//   return config;
// }

//2 —Å–ø–æ—Å—ñ–± —á–µ—Ä–µ–∑ filter
function funcName(arr) {
  const resultNumber = arr.filter(function (item) {
    return typeof item === "number";
  });
  const resultString = arr.filter(function (item) {
    return typeof item === "string";
  });

  const config = [resultNumber, resultString];
  return config;
}

console.log(funcName(arr));
//  /*
// [
// [5, 12, 99, 2, 2, 4, 3],
// [‚ÄùLimit‚Äù, ‚Äúa‚Äù, ‚Äú3‚Äù, ‚Äú33‚Äù, ‚Äúa‚Äù, ‚Äútext‚Äù, ‚Äústrong‚Äù, ‚Äúbroun‚Äù]
// ]
// */

// 8. –ù–∞–ø–∏—Å–∞—Ç–∏ —É–º–æ–≤–Ω—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, —è–∫–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏ –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.
//–ü–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ–±–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏. –ó—Ä–æ–±–∏—Ç–∏ 2 —Å–ø–æ—Å–æ–±–∞–º–∏ —á–µ—Ä–µ–∑ 2 —Ä—ñ–∑–Ω–∏—Ö —É–º–æ–≤–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
// –í –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≥–æ–¥–∏–Ω 23-5 ‚Äì –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏—Å—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ‚Äú–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ‚Äù
// –í –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≥–æ–¥–∏–Ω 5-11 ‚Äì –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏—Å—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ‚Äú–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É‚Äù
// –í –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≥–æ–¥–∏–Ω 11-17 ‚Äì –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏—Å—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ‚Äú–î–æ–±—Ä–æ–≥–æ –¥–Ω—è‚Äù
// –í –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≥–æ–¥–∏–Ω 17-23 ‚Äì –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏—Å—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ‚Äú–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞‚Äù.

// const todayDay = new Date();
// const dayTime = todayDay.getHours();
// if (dayTime > 23 || dayTime <= 5) {
//   console.log("–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ");
// } else if (dayTime > 5 && dayTime <= 11) {
//   console.log("–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É");
// } else if (dayTime > 11 && dayTime <= 17) {
//   console.log("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è");
// } else if (dayTime > 17 && dayTime <= 23) {
//   console.log("–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞‚Äù");
// } else {
//   console.log("errrooorrrrr");
// }
